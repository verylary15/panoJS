
/*******
    version 1.0
    author:棒棒糖（微信公众号：bbt_tech）
    dessciption:常用krpano接口封装

    使用说明：
        krpano.min.js封装了常用的krpano接口;
        --------------------------------------
        插件封装了set,get,tween属性方法和loadscene,call事件方法，并对其进行扩展优化；

        1.set方法。用于设置元素属性；通过kr(selector).set(options,type)形式使用;
                   seleector为元素id,即元素的name属性,其他属性方法与此相同;set()
                   接受两个参数：
                   options:设置属性对象列表,格式为json对象,必选参数;
                   type:修改元素类型,必选参数,注意：修改元素类型包括两种：layer和
                        hotspot;
                        type可选值：layer 或 l 或 1;  ==>表示元素为layer
                                    hotspot 或 hs 或 0 ==>表示元素为hotspot

                    其他函数type与此相同;

                    eg:kr('selector').set({
                        width:100,
                        height:100,
                        bgalpha:0.5
                    	},1)

                    	全局属性设置：krpano().set(object);

        2.get方法。用于获取元素属性。通过kr(selector).get(options,type)形式使用;
                    options:获取属性值或属性对象列表，当获取一个属性时,options为string,
                            返回一个string;
                            获取多个属性时，option为array,返回object;

                    eg:kr('selector').get('width',1);
                       kr('selector').get(['width','height','type'],1)

                       全局属性获取:krpano.get(string)，tips:全局属性单次只能获取一个属性值；

        3.tween方法。用于设定元素补间动画。用法和原生tween相同，用法请看示例:

                     eg:kr('selector').tween(width,100,0.2,default,callback)

        4.loadscene方法。用于加载场景。通过krpano.loadscene(scenename,null,MERGE,BLEND(0.5));

        5.call方法。调用其他krpano函数;krano.call(function)


********/



(
    function(window){
        
        let krpano=function(name){
            var panoid=document.getElementById("krpanoSWFObject");

            function isOptions(_arguments){  //判断传入参数类型函数
                        if(_arguments.length<2){
                            return -1;  //参数错误  或 跳转全局相关
                        }
                        else{
                            if(typeof _arguments[0] == 'object' && !isNaN(_arguments[0].length)){
                            return 'array';  //options为数组
                            }
                            else if(typeof _arguments[0] == 'string'){
                                return 'string';
                            }
                            else if(typeof _arguments[0] == 'object' && isNaN(_arguments[0].length)){
                                return 'json';  //options为json
                            }
                        }
                        
                    }

            return {
                object:panoid,
                /****set(options,type),设置函数****/
                set:function(options,type){
                    let _arguments=arguments;
                                       
                    if(isOptions(_arguments) == 'json'){
                        if(type==1 || type =='layer' || type == 'l'){
                            for(let item in options){
                                let attributes=`layer[${name}].${item}`;
                                this.object.set(attributes,options[item]);
                            }
                        }
                        else if(type==0 || type == 'hotspot' || type =="hs"){
                            for(let item in options){
                                let attributes=`hotspot[${name}].${item}`;
                                this.object.set(attributes,options[item]);
                            }
                        }
                    }
                    //设置全局属性
                    else{
                        //name != undefined ?console.error("set()："+"please check the arguments"):console.log(typeof name)
                        switch(name){
                            case undefined:
                                for(let item in options){
                                    this.object.set(item,options[item])
                                }
                            break;
                            default:
                            console.error("set()："+"please check the arguments");

                        }

                    }
                },
                /****设置函数****/
                get:function(options,type){
                    let _arguments=arguments;

                    if(isOptions(_arguments) == 'string'){
                        if(type==1 || type =='layer' || type == 'l'){
                            let attributes = `layer[${name}].${options}`;
                            return this.object.get(attributes);
                        }
                        else if(type==0 || type == 'hotspot' || type =="hs"){
                            let attributes = `hotspot[${name}].${options}`;
                            return this.object.get(attributes);
                        }
                    }
                    else if(isOptions(_arguments) == 'array'){
                        let value = [];
                        let result={};
                        if(type==1 || type =='layer' || type == 'l'){
                            for(let i in options){
                                let templedata = `layer[${name}].${options[i]}`;
                                result[options[i]] = this.object.get(templedata);
                                
                            }

                            return result;
                        }
                        if(type==0 || type == 'hotspot' || type =="hs"){
                            for(let i in options){
                               let templedata = `hotspot[${name}].${options[i]}`;
                                result[options[i]] = this.object.get(templedata);
                                
                            }

                            return result;
                        }
                    }
                    else{
                        switch(name){
                            case undefined:
                                if(typeof options == 'string'){
                                    return this.object.get(options)
                                }
                                else if(options.constructor == Array){
                                    console.error("arguments should be string!")
                                }
                            break;
                            default:
                            console.error("get()："+"please check the arguments");

                        }
                    }
                },
                /****动画函数***/
                tween:function(type,varible,value,time=0.5,tweentype='default',callback=null){
                    if(type==1 || type =='layer' || type == 'l'){
                        let attributes = `layer[${name}].${varible}`;
                        this.object.call("tween("+attributes+","+value+","+time+","+tweentype+","+callback+")");
                    }
                    else if(type==0 || type == 'hotspot' || type =="hs"){
                        let attributes = `hotspot[${name}].${varible}`;
                        this.object.call("tween("+attributes+","+value+","+time+","+tweentype+","+callback+")");
                    }
                },
                /***加载场景函数***/
                loadscene:function(scenelink,vars="null",flags="MERGE",blend="BLEND(0.5)"){
                    if(scenelink == '' || scenelink == null ){
                        console.error("scenelink is not defined");
                    }
                    else{
                        this.object.call("loadscene("+scenelink+","+vars+","+flags+","+blend+")");
                    }
                    
                },
                /**调用接口****/
                call:function(vars){
                    this.object.call(vars);
                }

            }
        }

        window.kr = krpano;
        window.krpano = krpano();
    }
)(window);

